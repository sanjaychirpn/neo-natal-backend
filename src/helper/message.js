export const msg = {
  common: {
    createdSuccess: 'Created successfully.',
    updatedSuccess: 'Updated successfully.',
    deletedSuccess: 'Deleted successfully.',
    createdError: 'Error in creating.',
    updatedError: 'Error in updating.',
    deletedError: 'Error in deleting.',
    recordNotFound: 'Record Not Found.',
    recordFound: 'Record Found.',
    somethingWentWrong: 'Something went wrong!',
    wrongObjectId: 'Enter Correct ObjectId in params!',
    emptyReqBody: 'Enter something in request body!',
  },
  JWT: {
    USER_NOT_FOUND: 'Logged in user not found.',
  },
  token: {
    invalid: 'Invalid token.',
    expired: 'Your token is expired.',
  },
  user: {
    userExist: 'User exist.',
    notLoggedIn: 'You are not logged in!',
    userEmailExist: 'User email already exist.',
    userNotExist: 'User does not exist.',
    userIdNotFound: 'User id not found.',
    invalidCredentials: 'Invalid Credentials.',
    userSavedSuccess: 'User registered successfully.',
    userSaveError: 'Error registering user!',
    userUpdatedSuccess: 'User Information updated successfully.',
    userStatusUpdated: 'User status updated successfully.',
    userImageSuccess: 'Profile image updated successfully.',
    passwordUpdatedSuccess: 'Password Updated successfully.',
    loggedInSuccess: 'You Are Successfully Logged In.',
    emailNotFound: 'User email not found.',
    userImageNotFound: 'Profile image Not Found.',
    passwordNotValid: 'Password did not match with records.',
    recordDeleted: 'Record deleted successfully.',
    errorInDelettingRecord: 'Error in deleting record.',
    forgotPwdSuccess: 'Password sent successfully. Please check your Email.',
    forgotPwdError: 'Email address did not match with records.',
    inactiveStatus: 'Your account is not active yet.',
    invalidToken: 'Token is empty or invalid Token.',
    logginError: 'Error in loggin.',
    errorInSaving: 'Error in saving user.',
    userProfileNotFound: 'Your profile not updated yet.',
    regMailSent: 'Registration email sent successfully!',
    actMailSent: 'Activation email sent successfully!',
    validUpgrade: 'Upgrade availabel',
    invalidUpgrade: 'upgrade not available',
    serialnumberInvalid: 'Invalid Serial number',
    validUser: 'Valid user!',
  },
  patient: {
    patientExist: 'patient exist.',
    notLoggedIn: 'You are not logged in!',
    patientEmailExist: 'Patient email already exist.',
    patientNotExist: 'Patient does not exist.',
    patientIdNotFound: 'Patient id not found.',
    invalidCredentials: 'Invalid Credentials.',
    patientSavedSuccess: 'Patient registered successfully.',
    patientSaveError: 'Error registering patient!',
    patientUpdatedSuccess: 'Patient Information updated successfully.',
    patientStatusUpdated: 'Patient status updated successfully.',
    patientImageSuccess: 'Profile image updated successfully.',
    passwordUpdatedSuccess: 'Password Updated successfully.',
    loggedInSuccess: 'You Are Successfully Logged In.',
    emailNotFound: 'Patient email not found.',
    patientImageNotFound: 'Profile image Not Found.',
    passwordNotValid: 'Password did not match with records.',
    recordDeleted: 'Record deleted successfully.',
    errorInDelettingRecord: 'Error in deleting record.',
    forgotPwdSuccess: 'Password sent successfully. Please check your Email.',
    forgotPwdError: 'Email address did not match with records.',
    inactiveStatus: 'Your account is not active yet.',
    invalidToken: 'Token is empty or invalid Token.',
    logginError: 'Error in loggin.',
    errorInSaving: 'Error in saving patient.',
    patientProfileNotFound: 'Your profile not updated yet.',
    regMailSent: 'Registration email sent successfully!',
    actMailSent: 'Activation email sent successfully!',
    validUpgrade: 'Upgrade availabel',
    invalidUpgrade: 'upgrade not available',
    serialnumberInvalid: 'Invalid Serial number',
    validUser: 'Valid patient!',
  },
  patientCase: {
    patientCaseExist: 'patientCase exist.',
    notLoggedIn: 'You are not logged in!',
    patientCaseEmailExist: 'patientCase email already exist.',
    patientCaseNotExist: 'patientCase does not exist.',
    patientCaseIdNotFound: 'patientCase id not found.',
    invalidCredentials: 'Invalid Credentials.',
    patientCaseSavedSuccess: 'patientCase registered successfully.',
    patientCaseSaveError: 'Error registering patientCase!',
    patientCaseUpdatedSuccess: 'patientCase Information updated successfully.',
    patientCaseStatusUpdated: 'patientCase status updated successfully.',
    patientCaseImageSuccess: 'Profile image updated successfully.',
    passwordUpdatedSuccess: 'Password Updated successfully.',
    loggedInSuccess: 'You Are Successfully Logged In.',
    emailNotFound: 'patientCase email not found.',
    patientCaseImageNotFound: 'Profile image Not Found.',
    passwordNotValid: 'Password did not match with records.',
    recordDeleted: 'Record deleted successfully.',
    errorInDelettingRecord: 'Error in deleting record.',
    forgotPwdSuccess: 'Password sent successfully. Please check your Email.',
    forgotPwdError: 'Email address did not match with records.',
    inactiveStatus: 'Your account is not active yet.',
    invalidToken: 'Token is empty or invalid Token.',
    logginError: 'Error in loggin.',
    errorInSaving: 'Error in saving patientCase.',
    patientCaseProfileNotFound: 'Your profile not updated yet.',
    regMailSent: 'Registration email sent successfully!',
    actMailSent: 'Activation email sent successfully!',
    validUpgrade: 'Upgrade availabel',
    invalidUpgrade: 'upgrade not available',
    serialnumberInvalid: 'Invalid Serial number',
    validUser: 'Valid patientCase!',
  },

  role: {
    accesDenied: 'You are not authorized to access this API.',
    notFound: 'Role not found.',
  },
  file: {
    uploadSuccess: 'File uploaded successfully',
    uploadError: 'Failed to upload file',
  },
  image: {
    uploadSuccess: 'Image uploaded successfully',
    deletedSuccess: 'Image removed successfully',
    uploadError: 'Failed to upload image',
  },
  userrole: {
    userroleSavedSuccess: ' userRole save successfully.',
    userroleSavedError: 'userRole save successfully',
    userRoleExist: 'userRole exist.',
    userRoleError: 'Error registering userRole!',
  },
};
